<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<!-- 
		1、mybatis可以使用properties来引入外部properties配置文件的内容；
			1)、resource：；引入类路径下的资源；
			2)、url：引入网络路径或者磁盘路径下的资源；
	 -->
	<properties resource="db.properties"></properties>

	<!-- 
		2、settings包含很多重要的设置项
			1)、setting：用来设置每一个设置项
				name：设置项名
				value：设置项取值
	 -->
	<settings>
		<!-- 开启驼峰命名规范和数据库字段名对应 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		
		<!-- 开启懒加载 -->
		<setting name="lazyLoadingEnabled" value="true"/>
		<setting name="aggressiveLazyLoading" value="false"/>
		
		<!-- 开启二级缓存 -->
		<setting name="cacheEnabled" value="true"/>
	</settings>
	
	<!-- 
		3、typeAliases：别名处理器，可以为我们的java类型起别名，别名不区分大小写
	 -->
	<typeAliases>
		<!-- 
			1)、typeAlias：为某个java类型起别名
				type：指定要起别名的类型全类名，默认别名就是类名小写，employee
				alias：指定新的别名
		 -->
		<!-- <typeAlias type="com.mybatis.entity.Employee" alias="emp"/> -->
		
		<!-- 
			2)、package：为某个包下的所有类批量起别名
				name：指定包名（为当前包下以及下面所有的后代包的每一个类都起一个默认别名（类名小写））
		 -->
		<package name="com.mybatis.entity"/>
		
		<!-- 
			3)、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名
		 -->
		
	</typeAliases>
	
	<!-- 
		4、environments：环境们，mybatis可以配置多种环境，default指定使用某种环境，可以达到快速切换环境；；
			1)、environment：配置一个具体的环境信息，必须有两个标签：transactionManager，dataSource，
				id代表当前环境的唯一标识；
				transactionManager：事务管理器
					type：事务管理器的类型
						JDBC：JdbcTransactionFactory
						MANAGED：ManagedTransactionFactory
					自定义事务管理器：实现TransactionFactory接口
						type：全类名
				dataSource：数据源
					type：数据源类型
						JNDI：JndiDataSourceFactory
						POOLED：PooledDataSourceFactory
						UNPOOLED：UnpooledDataSourceFactory
					自定义数据源：实现DataSourceFactory接口
						type：全类名
	 -->
	<environments default="development">
	
		<environment id="test">
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">
			<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- 
		5、databaseIdProvider：支持多数据库厂商
			type：DB_VENDOR：VendorDatabaseIdProvider
				作用就是得到数据库厂商的标识，mybatis就能根据数据库厂商标识来执行不同的sql
	 -->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的数据库厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider>
	
	<!-- 
		6、mappers：将sql映射文件注册全局配置中
	 -->
	<mappers>
		<!-- 
			mapper：注册一个sql映射
				resource：引用类路径下的sql映射文件
				url：引用网路路径或者磁盘路径下的sql映射文件
				class：引用接口
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上；
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要的，简单的Dao接口为了开发快速可以使用注解；				
		 -->
		<!-- <mapper resource="EmployeeMapper.xml" /> -->
		<!-- <mapper class="com.mybatis.dao.EmployeeMapper"/> -->
		<package name="com.mybatis.dao"/>
	</mappers>
</configuration>